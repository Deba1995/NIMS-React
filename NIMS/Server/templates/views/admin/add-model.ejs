<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <title>Hope UI | Responsive Bootstrap 5 Admin Dashboard Template</title>

    <!-- Favicon -->
    <link rel="shortcut icon" href="../../assets/images/favicon.ico" />

    <!-- Library / Plugin Css Build -->
    <link rel="stylesheet" href="../../assets/css/core/libs.min.css" />

    <!-- Hope Ui Design System Css -->
    <link rel="stylesheet" href="../../assets/css/hope-ui.min.css?v=2.0.0" />

    <!-- Custom Css -->
    <link rel="stylesheet" href="../../assets/css/custom.min.css?v=2.0.0" />

    <!-- Dark Css -->
    <link rel="stylesheet" href="../../assets/css/dark.min.css" />

    <!-- Customizer Css -->
    <link rel="stylesheet" href="../../assets/css/customizer.min.css" />

    <!-- RTL Css -->
    <link rel="stylesheet" href="../../assets/css/rtl.min.css" />
  </head>
  <body class="  ">
    <!-- loader Start -->
    <div id="loading">
      <div class="loader simple-loader">
        <div class="loader-body"></div>
      </div>
    </div>
    <!-- loader END -->

    <%- include('../../partials/aside') %>

    <main class="main-content">
      <!-- Nav Component -->
      <%- include('../../partials/nav') %>
      <div class="conatiner-fluid content-inner mt-n5 py-0">
        <div>
          <form id="formModel" enctype="application/x-www-form-urlencoded">
            <div class="row">
              <div class="col-xl-12 col-lg-12">
                <div class="card">
                  <div class="card-header d-flex justify-content-between">
                    <div class="header-title">
                      <h4 class="card-title">New Model Information</h4>
                    </div>
                  </div>
                  <div
                    class="bd-example"
                    style="display: none"
                    id="success-notification"
                  >
                    <div
                      class="alert alert-left alert-success alert-dismissible fade show mb-3"
                      role="alert"
                    >
                      <span> This is a success alertâ€”check it out! </span>
                      <button
                        type="button"
                        class="btn-close btn-close-white"
                        data-bs-dismiss="alert"
                        aria-label="Close"
                      ></button>
                    </div>
                  </div>
                  <div class="card-body">
                    <div class="new-user-info">
                      <div class="row">
                        <div class="form-group col-md-6">
                          <label class="form-label" for="fname"
                            >Oem Name:</label
                          >
                          <select
                            name="oemCode"
                            id="oemCode"
                            class="selectpicker form-control"
                            data-style="py-0"
                            data-doc="<%= JSON.stringify(oems)%>"
                          >
                            <option disabled selected value="">Select</option>
                            <% oems.forEach((data)=>{ %>
                            <option value="<%=  data.oemCode %>">
                              <%= data.oemName %>
                            </option>
                            <%} )%>
                          </select>
                          <div class="invalid-feedback" id="oemCode_err"></div>
                        </div>

                        <div class="form-group col-md-6">
                          <label class="form-label" for="phone"
                            >Category:</label
                          >
                          <select
                            name="categoryName"
                            id="categoryName"
                            class="selectpicker form-control"
                            data-style="py-0"
                          >
                            <!-- Options will be populated dynamically -->
                          </select>
                          <div
                            class="invalid-feedback"
                            id="categoryName_err"
                          ></div>
                        </div>
                      </div>
                      <hr />
                      <div style="display: flex; align-items: center">
                        <h5 class="mb-3">Models</h5>
                        <button
                          style="margin-bottom: 1rem !important"
                          class="btn btn-sm btn-icon text-primary flex-end"
                          data-bs-toggle="modal"
                          data-bs-target="#staticBackdropLive"
                          data-bs-original-title="Add"
                          id="addModel"
                          type="button"
                        >
                          <span class="btn-inner">
                            <svg
                              style="width: 50px"
                              class="icon-32"
                              width="32"
                              viewBox="0 0 24 24"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                opacity="0.4"
                                d="M16.6667 2H7.33333C3.92889 2 2 3.92889 2 7.33333V16.6667C2 20.0622 3.92 22 7.33333 22H16.6667C20.0711 22 22 20.0622 22 16.6667V7.33333C22 3.92889 20.0711 2 16.6667 2Z"
                                fill="currentColor"
                              ></path>
                              <path
                                d="M15.3205 12.7083H12.7495V15.257C12.7495 15.6673 12.4139 16 12 16C11.5861 16 11.2505 15.6673 11.2505 15.257V12.7083H8.67955C8.29342 12.6687 8 12.3461 8 11.9613C8 11.5765 8.29342 11.2539 8.67955 11.2143H11.2424V8.67365C11.2824 8.29088 11.6078 8 11.996 8C12.3842 8 12.7095 8.29088 12.7495 8.67365V11.2143H15.3205C15.7066 11.2539 16 11.5765 16 11.9613C16 12.3461 15.7066 12.6687 15.3205 12.7083Z"
                                fill="currentColor"
                              ></path>
                            </svg>
                          </span>
                        </button>
                      </div>

                      <div class="row">
                        <div class="form-group col-md-6">
                          <div class="card-body">
                            <ul class="list-inline m-0 p-0" id="modelList"></ul>
                            <div
                              class="invalid-feedback"
                              id="models[]_err"
                            ></div>
                          </div>
                        </div>
                      </div>

                      <button
                        type="submit"
                        class="btn btn-primary"
                        style="float: right"
                      >
                        Add New Model
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </form>
          <div
            class="modal fade"
            id="staticBackdropLive"
            data-bs-backdrop="static"
            data-bs-keyboard="false"
            tabindex="-1"
            aria-labelledby="staticBackdropLiveLabel"
            aria-modal="true"
            role="dialog"
          >
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="staticBackdropLiveLabel">
                    Add Model
                  </h5>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                    aria-label="Close"
                  ></button>
                </div>
                <div class="modal-body">
                  <input
                    type="text"
                    class="form-control"
                    id="modelName"
                    aria-describedby="email"
                    placeholder="Model name"
                  />
                  <div class="invalid-feedback" id="modelName_err"></div>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-gray"
                    data-bs-dismiss="modal"
                    id="closeModel"
                  >
                    Close
                  </button>
                  <button
                    type="button"
                    class="btn btn-primary"
                    id="addNewModel"
                  >
                    Add
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- Footer Section Start -->
      <%- include('../../partials/footer') %>
      <!-- Footer Section End -->
    </main>
    <%- include('../../partials/offcanvas') %>

    <!-- Library Bundle Script -->
    <script src="../../assets/js/core/libs.min.js"></script>

    <script src="../assets/js/sidenavactive.js" defer></script>

    <!-- External Library Bundle Script -->
    <script src="../../assets/js/core/external.min.js"></script>

    <!-- Widgetchart Script -->
    <script src="../../assets/js/charts/widgetcharts.js"></script>

    <!-- mapchart Script -->
    <script src="../../assets/js/charts/vectore-chart.js"></script>
    <script src="../../assets/js/charts/dashboard.js"></script>

    <!-- fslightbox Script -->
    <script src="../../assets/js/plugins/fslightbox.js"></script>

    <!-- Settings Script -->
    <script src="../../assets/js/plugins/setting.js"></script>

    <!-- Slider-tab Script -->
    <script src="../../assets/js/plugins/slider-tabs.js"></script>

    <!-- Form Wizard Script -->
    <script src="../../assets/js/plugins/form-wizard.js"></script>
    <!-- <script src="../assets/js/client/add-client.js" defer></script> -->

    <!-- AOS Animation Plugin-->
    <script>
      const addModelBtn = document.querySelector("#addModel");
      const addNewModel = document.querySelector("#addNewModel");
      const value = document.querySelector("#modelName");
      const list = document.querySelector("#modelList");
      const modelName_err = document.querySelector("#modelName_err");
      const form = document.querySelector("#formModel");
      // Get references to the select elements
      const oemSelect = document.getElementById("oemCode");
      const categorySelect = document.getElementById("categoryName");
      const successNotification = document.querySelector(
        "#success-notification"
      );
      // Function to update category options based on selected oem
      function updateCategoryOptions() {
        const selectedOem = oemSelect.value;

        const oemData = JSON.parse(oemSelect.dataset.doc);
        const selectedOEMData = oemData.filter(
          (item) => item.oemCode === selectedOem
        );

        if (selectedOEMData.length > 0) {
          //Clear existing category options
          categorySelect.innerHTML = "";
          const categories = selectedOEMData[0].categories;

          categories.forEach((category) => {
            const option = document.createElement("option");
            option.value = category;
            option.textContent = category;
            categorySelect.appendChild(option);
          });
        }
      }

      oemSelect.addEventListener("change", updateCategoryOptions);

      categorySelect.addEventListener("change", () => {
        list.innerHTML = "";
      });

      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        //reset errors
        const ulElement = document.getElementById("modelList");
        let h6Values = [];
        // Loop through each <li> element within the <ul>
        ulElement.querySelectorAll("li").forEach(function (liElement) {
          // Get the <h6> element within the <li>
          const h6Element = liElement.querySelector("h6");

          // Get the text content of the <h6> element and push it into the array
          h6Values.push(h6Element.textContent);
        });

        const formData = new FormData(form);
        // Loop through the data array and append each value
        if (h6Values.length > 0) {
          for (let i = 0; i < h6Values.length; i++) {
            formData.append("models[]", h6Values[i]);
          }
        } else {
          formData.append("models[]", "");
        }
        const dataFormat = new URLSearchParams(formData);
        for (let [k, j] of formData) {
          //clear error
          const err = document.getElementById(`${k}_err`);
          err.textContent = "";
          err.style.display = "none";
        }

        try {
          const res = await fetch("/oems/add-model", {
            method: "POST",
            body: dataFormat,
            headers: {
              "Content-Type": "application/x-www-form-urlencoded",
            },
          });
          const data = await res.json();
          if (data.errors) {
            const entries = Object.entries(data.errors);
            for (let [k, v] of entries) {
              if (v != "") {
                if (k === "models.0" || k === "models" || k === "modelName") {
                  k = "models[]";
                }

                const err = document.getElementById(`${k}_err`);
                err.textContent = v;
                err.style.display = "block";
              }
            }
          }
          if (data.model) {
            console.log(data.model);
            successNotification.style.display = "block";
            setTimeout(() => {
              successNotification.style.display = "none";
              location.assign(data.location);
            }, 700);
          }
        } catch (err) {
          console.error(err);
        }
      });

      addModelBtn.addEventListener("click", () => {
        modelName_err.textContent = "";
        modelName_err.style.display = "hidden";
      });

      addNewModel.addEventListener("click", () => {
        if (!value.value == "") {
          const div = `<li class="d-flex mb-4 align-items-center">
                                <div class="ms-3 flex-grow-1">
                                  <h6>${value.value}</h6>
                                </div>
                                <div class="dropdown">
                                  <span
                                    class="dropdown-toggle"
                                    id="dropdownMenuButton9"
                                    data-bs-toggle="dropdown"
                                    aria-expanded="false"
                                    role="button"
                                  >
                                  </span>
                                  <div
                                    class="dropdown-menu dropdown-menu-end"
                                    aria-labelledby="dropdownMenuButton9"
                                  >
                                    <button type="button"
                                      class="dropdown-item removeButton"
                                      >Remove</button
                                    >
                                  </div>
                                </div>
                              </li>`;

          document.querySelector("#closeModel").click();
          list.insertAdjacentHTML("afterbegin", div);
          value.value = "";
          const removeButtons = document.querySelectorAll(".removeButton");
          removeList(removeButtons);
        } else {
          modelName_err.textContent = "Model name cannot be empty";
          modelName_err.style.display = "block";
        }
      });

      function removeList(buttons) {
        buttons.forEach((button) => {
          button.addEventListener("click", function (e) {
            if (e.target.classList.contains("removeButton")) {
              // Get the parent <li> element that contains the item and button
              let listItem = e.target.closest("li");

              // Remove the <li> element from the list
              listItem.remove();
            }
          });
        });
      }
    </script>
    <!-- App Script -->
    <script src="../../assets/js/hope-ui.js" defer></script>
  </body>
</html>
